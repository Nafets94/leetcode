// https://leetcode.com/problems/top-k-frequent-elements/Figures/347_rewrite/summary.png

public class Solution {
    public int[] TopKFrequent(int[] nums, int k) {
        Dictionary<int, int> numsDic = new Dictionary<int, int>();

        for (int i=0; i<nums.Length; i++)
        {
            if (numsDic.ContainsKey(nums[i]))
                numsDic[nums[i]]++;
            else
                numsDic[nums[i]]=1;
        }

        PriorityQueue<int, int> heap = new PriorityQueue<int, int>();

        foreach (KeyValuePair<int, int> entry in numsDic )
        {
            heap.Enqueue(entry.Key, entry.Value);

            if (heap.Count > k) heap.Dequeue();
        }

        int[] result = new int[k];
        for (int i=0; i<k; i++)
        {
            result[i] = heap.Dequeue();
        }

        return result;
    }
}