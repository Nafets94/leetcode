public class Solution {
    public int CharacterReplacement(string s, int k)
    {
        IDictionary<char, int> charFrequency = new Dictionary<char, int>();

        int start = 0;
        int maxFrequency = 0;
        int windowSize = 0;
        int longestSubstring = 0;

        for(int end=0; end<s.Length; end++)
        {
            if(charFrequency.ContainsKey(s[end]))
                charFrequency[s[end]]++;
            else
                charFrequency[s[end]] = 1;

            maxFrequency = charFrequency.Values.Max();

            if (!IsWindowValid(end+1-start, maxFrequency, k))
            {
                if(charFrequency[s[start]] == 1)
                    charFrequency.Remove(s[start]);
                else
                    charFrequency[s[start]]--;

                start++;
            }

            longestSubstring = end + 1 -start;
        }
       
       return longestSubstring;
    }

    public bool IsWindowValid(int windowSize, int maxFrequency, int k)
    {
        return windowSize - maxFrequency - k <= 0;
    }
}