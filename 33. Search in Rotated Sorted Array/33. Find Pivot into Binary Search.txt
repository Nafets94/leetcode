public class Solution {
    public int Search(int[] nums, int target)
    {
        if (nums.Length == 0) return -1;
        if (nums.Length == 1) return nums[0] == target ? 0 : -1;
        
        int pivotIndex = GetPivotIndex(nums, 0, nums.Length-1);

        // if pivotIndex = 0 the array is in ascending order
        if (pivotIndex == 0) {
            return BinarySearch(nums, target, 0, nums.Length - 1);
        }

        int answer = BinarySearch(nums, target, 0, pivotIndex - 1);
        if (answer != -1) {
            return answer;
        }

        return BinarySearch(nums, target, pivotIndex, nums.Length-1);
    }

    public int BinarySearch(int[] nums, int target, int left, int right)
    {
        if (left > right) return -1;

        int mid = left + (right - left) / 2;

        if (nums[mid] == target) return mid;

        if (target < nums[mid]) {
            return BinarySearch(nums, target, left, mid-1);
        } else {
            return BinarySearch(nums, target, mid+1, right);
        }
    }

    public int GetPivotIndex(int[] nums, int left, int right)
    {
        if (left >= right) return 0;

        int mid = left + (right - left) / 2;

        if (mid > 0 && nums[mid-1] > nums[mid]) return mid;
        if (mid < nums.Length- 1 && nums[mid] > nums[mid+1]) return mid+1;

        if (nums[left] < nums[mid])
            return GetPivotIndex(nums, mid+1, right);
        else
            return GetPivotIndex(nums, left, mid-1);
    }
}