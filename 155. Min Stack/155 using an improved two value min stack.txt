// https://leetcode.com/problems/min-stack/Figures/155/improved_two_stacks.png

public class MinStack {

    private Stack<int> mainStack = new Stack<int>();
    private Stack<int[]> minStack = new Stack<int[]>();

    public MinStack() {}
    
    public void Push(int val) {
        mainStack.Push(val);

        if (minStack.Count == 0 || val < minStack.Peek()[0]) {
            minStack.Push(new int[] {val, 1});
        } else if (val == minStack.Peek()[0]) {
            minStack.Peek()[1]++;
        }
    }
    
    public void Pop() {
        if (minStack.Peek()[0] == mainStack.Peek()) {
            minStack.Peek()[1]--;
            if (minStack.Peek()[1] == 0) {
                minStack.Pop();
            }
        }
        mainStack.Pop();
    }
    
    public int Top() {
        return mainStack.Peek();
    }
    
    public int GetMin() {
        return minStack.Peek()[0];
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.Push(val);
 * obj.Pop();
 * int param_3 = obj.Top();
 * int param_4 = obj.GetMin();
 */